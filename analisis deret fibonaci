#include <iostream>
#include <chrono>
using namespace std;
using namespace chrono;

int fibonacci_recursive(int n) {
    if (n <= 1)
        return n;
    else
        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2);
}

int fibonacci_dynamic(int n) {
    int fib[n+1];
    fib[0] = 0;
    fib[1] = 1;
    for (int i = 2; i <= n; ++i)
        fib[i] = fib[i-1] + fib[i-2];
    return fib[n];
}

int main() {
    int n_values[] = {10, 25, 30, 40, 50};
    int num_values = sizeof(n_values) / sizeof(n_values[0]);

    cout << "Pendekatan Rekursif:\n";
    for (int i = 0; i < num_values; ++i) {
        int n = n_values[i];
        
        auto start = high_resolution_clock::now();
        int fib = fibonacci_recursive(n);
        auto stop = high_resolution_clock::now();
        
        auto duration = duration_cast<microseconds>(stop - start);

        cout << "Fibonacci(" << n << ") = " << fib << ", Waktu eksekusi: " << duration.count() << " microseconds\n";
    }

    return 0;
}
